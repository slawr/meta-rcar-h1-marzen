From b470e5f7a54c51464c92c0b79e50d04910a405ab Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Mon, 10 Dec 2012 11:27:43 +0000
Subject: [PATCH 102/106] ARM: shmobile: r8a7779: Set the SGX clock to clks

Whilst it's possible to change the SGX clock speed, we set it to
the maximum (i.e. clks).

The register used to control this, is under the influence of the
SYSC SGX power domain. You can't set it unless it's powered up.
For this reason, the code to has been added to the PM code, not the
clock code.

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
---
 arch/arm/mach-shmobile/pm-r8a7779.c |   48 ++++++++++++++++++++++++++++++++++-
 1 files changed, 47 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-shmobile/pm-r8a7779.c b/arch/arm/mach-shmobile/pm-r8a7779.c
index a18a4ae..98df808 100644
--- a/arch/arm/mach-shmobile/pm-r8a7779.c
+++ b/arch/arm/mach-shmobile/pm-r8a7779.c
@@ -161,9 +161,55 @@ static int pd_power_down(struct generic_pm_domain *genpd)
 	return r8a7779_sysc_power_down(to_r8a7779_ch(genpd));
 }
 
+#define MSTPCR3 0xffc8003c
+#define SCR1    0xfff12000
+#define 	SGX_FREQ_CHANGE	(1 << 16)
+#define	MODEMR	0xffcc0020
+#define		MD1	(1 << 1)
+#define		MD2	(1 << 2)
+
+/*
+ * The SGX clock comes via the SGX Control Reg (SCR). This allows the SGX clock
+ * to be set to 200 or 250MHz, depending on MD1. We force the setting so that
+ * it is always the same as clks, i.e. the highest speed.
+ * However, it must be set _after_ the SYSC power domain is enabled.
+ */
+static void sgx_set_scr(void)
+{
+	void __iomem *io_mstp3;
+	void __iomem *io_scr1;
+	void __iomem *io_modemr;
+	u32 md1;
+	u32 scr1;
+
+	io_mstp3 = ioremap_nocache(MSTPCR3, 4);
+	io_scr1 = ioremap_nocache(SCR1, 4);
+	io_modemr = ioremap_nocache(MODEMR, 4);
+
+	/* Clear the SCR MSTP bit */
+	iowrite32(ioread32(io_mstp3) & ~(1 << 19), io_mstp3);
+
+	/* Always set SGX clock to clks */
+	md1 = ioread32(io_modemr) & MD1;
+	scr1 = ioread32(io_scr1);
+	if (md1 && ((scr1 & SGX_FREQ_CHANGE) == 0))
+		iowrite32(scr1 | SGX_FREQ_CHANGE, io_scr1);
+
+	iounmap(io_modemr);
+	iounmap(io_scr1);
+	iounmap(io_mstp3);
+}
+
 static int pd_power_up(struct generic_pm_domain *genpd)
 {
-	return r8a7779_sysc_power_up(to_r8a7779_ch(genpd));
+	int ret = r8a7779_sysc_power_up(to_r8a7779_ch(genpd));
+
+	if (!ret && (genpd == &r8a7779_sgx.genpd)) {
+		/* Setting SCR here as we need power to the SGX domain */
+		sgx_set_scr();
+	}
+
+	return ret;
 }
 
 static bool pd_is_off(struct generic_pm_domain *genpd)
-- 
1.7.5.4

