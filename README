This README file contains information on building the meta-rcar-h1-marzen
BSP layer, and booting the images contained in the /binary directory.
Please see the corresponding sections below for details.


Dependencies
============

This layer depends on:

  URI: git://git.openembedded.org/bitbake
  branch: master

  URI: git://git.openembedded.org/openembedded-core
  layers: meta
  branch: master

The Marzen BSP is developed and tested using the GCC toolchain 
Code Sourcery G++ Lite 2010.09-50 for ARM GNU/Linux which can be obtained from here:
http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/

Patches
=======

This layer will be upstreamed to the Yocto project. Until that is achieved 
please submit any patches against this BSP to the maintainer.

Maintainer: Stephen Lawrence <stephen.lawrence@renesas.com>


Table of Contents
=================

  I. Building the meta-rcar-h1-marzen BSP layer
 II. Booting the images in /binary


I. Building the meta-rcar-h1-marzen BSP layer
=============================================

In order to build an image with BSP support for a given release, you
need to download the corresponding BSP tarball from the 'Board Support
Package (BSP) Downloads' page of the Yocto Project website.

Assuming you extracted the BSP tarball contents at the top-level of 
your yocto build tree, you can build a rcar-h1-marzen image by adding 
the location of the meta-rcar-h1-marzen layer to bblayers.conf, 
along with any other layers needed (to access common metadata shared 
between BSPs) e.g.:

  yocto/meta-rcar-h1-marzen \

To enable the rcar-h1-marzen layer, add the rcar-h1-marzen MACHINE to local.conf:

  MACHINE ?= "rcar-h1-marzen"

You should then be able to build a rcar-h1-marzen image as such:

  $ source oe-init-build-env
  $ bitbake core-image-minimal

To build the kernel alone:
  $ bitbake linux-mainline

At the end of a successful build, you should have a live image that
you can boot from a USB flash drive (see instructions on how to do
that below, in the section 'Booting the images from /binary').


II. Booting the images in /binary
=================================

Memory Map
----------
Memory:      Address:               Function:
NAND Flash   0x00000000-0x0001FFFF  U-Boot
             0x00020000-0x005FFFFF  U-Boot environment
             0x00600000-0x006FFFFF  Kernel image (optional)
DDR          0x60000000-0x9FFFFFFF  Kernel

Hardware
--------
The serial port on the R-Car H1 device is attached to a serial to 
USB convertor on the Marzen board. Please connect a PC to the board 
using a mini-USB cable on connector CN18 (DEBUG0). You may need to 
install drivers for the Silicon Labs CP210x USB to UART Bridge.

The serial settings are:
Baud rate: 115200
Data: 8 bits
Parity: None
Stop: 1 bit
Flow control: None

Please connect the PC to the board using Ethernet, either using an Ethernet 
cross-over cable or using an Ethernet switch, on connector CN9 (LAN).

U-Boot
------
Most of the commands described here rely on the Marzen board 
downloading binary images, over Ethernet, from a TFTP server. 
Once you have setup a TFTP server, the IP addresses used by
U-Boot must be setup on the board, for example:
  $ setenv ipaddr 192.168.1.31
  $ setenv netmask 255.255.255.0
  $ setenv serverip 192.168.1.30
  $ setenv gatewayip ${serverip}
  $ saveenv

Flash a new U-Boot image:
The following U-Boot commands can be used install a new U-Boot image.
It loads the new image from a TFTP server.
  $ tftp /marzen/boot/u-boot.bin
  $ protect off all
  $ erase 0 +${filesize}
  $ cp.b ${fileaddr} 0 ${filesize}

Flash a new kernel image:
The following U-Boot commands can be used to copy a new kernel image 
to flash memory. It loads the new image from a TFTP server.
  $ tftp /marzen/boot/uImage
  $ protect off all
  $ erase 0x00600000 +${filesize}
  $ cp.b ${fileaddr} 0x00600000 ${filesize}
  $ setenv bootcmd 'cp.l 0x00600000 0x60007fc0 0x100000; bootm'
  $ saveenv

Kernel arguments for root file system on microSD card:
The following U-Boot commands can be used to setup the kernel argument 
to use a root file system on the microSD card.
  $ setenv bootargs console=ttySC2,115200 root=/dev/mmcblk0p1 rootwait
  $ saveenv

Kernel arguments for root file system on USB:
The following U-Boot commands can be used to setup the kernel argument 
to use a root file system on a USB stick.
  $ setenv bootargs console=ttySC2,115200 root=/dev/sda1 rootwait
  $ saveenv

Development:
The following U-Boot commands can be used to load the kernel image from 
a TFTP server, and use an NFS mounted root file system. This assumes 
static IP addresses are used.
  $ setenv bootfile /marzen/boot/uImage
  $ setenv bootcmd 'tftp; bootm'
  $ setenv bootargs console=ttySC2,115200 root=/dev/nfs rw
nfsroot=${serverip}:/tftpboot/marzen ip=${ipaddr}
  $ saveenv

Kernel
======
USB Host:
When you insert a formatted USB stick, you will see notification messages. 
You can then mount the stick, for example:
  $ mkdir –p /mnt/usb
  $ mount /dev/sda1 /mnt/usb

SD:
When you insert a formatted microSD card, you will see notification messages. 
You can then mount the card, for example:
  $ mkdir –p /mnt/sd
  $ mount /dev/mmcblk0p1 /mnt/sd

Display:
The display resolution can be changed using the fbset tool, for example:
  $ fbset -fb /dev/fb0 -xres 1280 -yres 720 -depth 16

Images can be displayed using fbv, for example:
  $ fbv image.jpg

Note: fbv uses the current framebuffer, as determined from the FRAMEBUFFER environment
variable. If you wish to output images using DU1, you can do:
  $ export FRAMEBUFFER=/dev/fb1
  $ fbv image.jpg

Audio:
By default the audio output is muted. To change this, run:
  $ amixer set 'LINEOUT Mixer DACL' unmute

You can play PCM audio, for example:
  $ aplay music.wav

--- replace with specific instructions for your platform ---

This BSP contains bootable live images, which can be used to directly
boot Yocto off of a USB flash drive.

Under Linux, insert a USB flash drive.  Assuming the USB flash drive
takes device /dev/sdf, use dd to copy the live image to it.  For
example:

# dd if=core-image-sato-rcar-h1-marzen-20101207053738.hddimg of=/dev/sdf
# sync
# eject /dev/sdf

This should give you a bootable USB flash device.  Insert the device
into a bootable USB socket on the target, and power on.  This should
result in a system booted to the Sato graphical desktop.

If you want a terminal, use the arrows at the top of the UI to move to
different pages of available applications, one of which is named
'Terminal'.  Clicking that should give you a root terminal.

If you want to ssh into the system, you can use the root terminal to
ifconfig the IP address and use that to ssh in.  The root password is
empty, so to log in type 'root' for the user name and hit 'Enter' at
the Password prompt: and you should be in.

----

If you find you're getting corrupt images on the USB (it doesn't show
the syslinux boot: prompt, or the boot: prompt contains strange
characters), try doing this first:

# dd if=/dev/zero of=/dev/sdf bs=1M count=512
